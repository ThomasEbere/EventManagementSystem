package configfile;

import java.io.IOException;
import java.util.Properties;
import javax.sql.DataSource;
import org.apache.commons.dbcp2.BasicDataSource;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.view.InternalResourceViewResolver;


@EnableWebMvc
@EnableTransactionManagement
@Configuration
@ComponentScan(basePackages={"routers","databank"})
@PropertySource("classpath:database.properties")
@PropertySource("classpath:database1.properties")
public class AppConfiguration {
	
	@Autowired
	
	private Environment env;
	
	@Bean
	public HibernateTemplate hibernateTemplate()
	{
		return new HibernateTemplate(sessionFactory());
	}
	
	@Bean
	  public SessionFactory sessionFactory() {
		LocalSessionFactoryBean lsfb = new LocalSessionFactoryBean();
		lsfb.setDataSource(getDataSource());
		lsfb.setPackagesToScan("app");
		lsfb.setHibernateProperties(hibernateProperties());
		try {
		  lsfb.afterPropertiesSet();
		} catch (IOException e) {
		  e.printStackTrace();
		}
		return lsfb.getObject();
	  }
	
	@Bean
	  public DataSource getDataSource() {
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName(env.getProperty("database.driver"));
		dataSource.setUrl(env.getProperty("database.url"));
		dataSource.setUsername(env.getProperty("database.root"));
		dataSource.setPassword(env.getProperty("database.password"));
		dataSource.setDriverClassName(env.getProperty("database1.driver"));
		dataSource.setUrl(env.getProperty("database1.url"));
		dataSource.setUsername(env.getProperty("database1.root"));
		dataSource.setPassword(env.getProperty("database1.password"));
		return dataSource;
	  }
	
	@Bean
	  public HibernateTransactionManager hibTransMan() {
		return new HibernateTransactionManager(sessionFactory());
	  }
	
	private Properties hibernateProperties() {
		Properties properties = new Properties();
		properties.put("hibernate.dialect", env.getProperty("hibernate.dialect"));
		properties.put("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
		properties.put("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
		properties.put("hibernate.dialect", env.getProperty("hibernate1.dialect"));
		properties.put("hibernate.hbm2ddl.auto", env.getProperty("hibernate1.hbm2ddl.auto"));
		properties.put("hibernate.show_sql", env.getProperty("hibernate1.show_sql"));
		return properties;
	  }

	@Bean
	public InternalResourceViewResolver viewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setPrefix("/WEB-INF/views/");
		viewResolver.setSuffix(".jsp");
		return viewResolver;
	}
	
	public void addResourceHandlers(final ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/resources/**").addResourceLocations("/resources");
	}
}
